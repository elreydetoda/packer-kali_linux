
variable "bento_debian_dir" {
  type    = string
  default = "prov_packer/bento/packer_templates/debian"
}

variable "box_basename" {
  type    = string
  default = "red-automated_kali"
}

variable "build_directory" {
  type    = string
  default = ""
}

variable "build_script_dir" {
  type    = string
  default = "prov_packer"
}

variable "cpus" {
  type    = string
  default = "2"
}

variable "disk_size" {
  type    = string
  default = "65536"
}

variable "headless" {
  type    = string
  default = ""
}

variable "http_directory" {
  type    = string
  default = "install/http"
}

variable "http_proxy" {
  type    = string
  default = "${env("http_proxy")}"
}

variable "https_proxy" {
  type    = string
  default = "${env("https_proxy")}"
}

variable "iso_checksum" {
  type    = string
  default = ""
}

variable "iso_url" {
  type    = string
  default = ""
}

variable "memory" {
  type    = string
  default = "4096"
}

variable "no_proxy" {
  type    = string
  default = "${env("no_proxy")}"
}

variable "preseed_path" {
  type    = string
  default = ""
}

variable "template" {
  type    = string
  default = "packerAutoKali"
}

variable "vagrant_cloud_token" {
  type      = string
  default   = ""
  sensitive = true
}

variable "vagrantfile" {
  type    = string
  default = "install/vagrantfile-kali_linux.template"
}

variable "vm_name" {
  type    = string
  default = ""
}

variable "vm_version" {
  type    = string
  default = ""
}

source "qemu" "autogenerated_1" {
  boot_command       = ["<esc><wait>", "install <wait>", " preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/${var.preseed_path} <wait>", "debian-installer=en_US.UTF-8 <wait>", "auto <wait>", "locale=en_US.UTF-8 <wait>", "kbd-chooser/method=us <wait>", "keyboard-configuration/xkb-keymap=us <wait>", "netcfg/get_hostname={{ .Name }} <wait>", "netcfg/get_domain=vagrantup.com <wait>", "fb=false <wait>", "debconf/frontend=noninteractive <wait>", "console-setup/ask_detect=false <wait>", "console-keymaps-at/keymap=us <wait>", "grub-installer/bootdev=/dev/vda <wait>", "<enter><wait>"]
  boot_wait          = "10s"
  cpus               = "${var.cpus}"
  disk_cache         = "unsafe"
  disk_compression   = true
  disk_detect_zeroes = "unmap"
  disk_discard       = "unmap"
  disk_image         = false
  disk_interface     = "virtio-scsi"
  disk_size          = "${var.disk_size}"
  headless           = "${var.headless}"
  http_directory     = "${var.http_directory}"
  iso_checksum       = "${var.iso_checksum}"
  iso_url            = "${var.iso_url}"
  memory             = "${var.memory}"
  output_directory   = "${var.build_directory}/packer-${var.template}-qemu"
  shutdown_command   = "echo 'vagrant' | sudo -S /sbin/shutdown -hP now"
  ssh_password       = "vagrant"
  ssh_port           = 22
  ssh_timeout        = "10000s"
  ssh_username       = "vagrant"
  vm_name            = "${var.template}-${var.build_directory}"
}

source "virtualbox-iso" "autogenerated_2" {
  boot_command            = ["<esc><wait>", "install <wait>", " preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/${var.preseed_path} <wait>", "debian-installer=en_US.UTF-8 <wait>", "auto <wait>", "locale=en_US.UTF-8 <wait>", "kbd-chooser/method=us <wait>", "keyboard-configuration/xkb-keymap=us <wait>", "netcfg/get_hostname={{ .Name }} <wait>", "netcfg/get_domain=vagrantup.com <wait>", "fb=false <wait>", "debconf/frontend=noninteractive <wait>", "console-setup/ask_detect=false <wait>", "console-keymaps-at/keymap=us <wait>", "grub-installer/bootdev=/dev/sda <wait>", "<enter><wait>"]
  boot_wait               = "10s"
  cpus                    = "${var.cpus}"
  disk_size               = "${var.disk_size}"
  gfx_controller          = "vmsvga"
  gfx_vram_size           = "48"
  guest_additions_path    = "VBoxGuestAdditions_{{ .Version }}.iso"
  guest_os_type           = "Debian_64"
  hard_drive_interface    = "sata"
  headless                = "${var.headless}"
  http_directory          = "${var.http_directory}"
  iso_checksum            = "${var.iso_checksum}"
  iso_url                 = "${var.iso_url}"
  memory                  = "${var.memory}"
  output_directory        = "${var.build_directory}/packer-${var.template}-virtualbox"
  shutdown_command        = "echo 'vagrant' | sudo -S /sbin/shutdown -hP now"
  ssh_password            = "vagrant"
  ssh_port                = 22
  ssh_timeout             = "10000s"
  ssh_username            = "vagrant"
  virtualbox_version_file = ".vbox_version"
  vm_name                 = "${var.template}-${var.build_directory}"
}

source "vmware-iso" "autogenerated_3" {
  boot_command        = ["<esc><wait>", "install <wait>", " preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/${var.preseed_path} <wait>", "debian-installer=en_US.UTF-8 <wait>", "auto <wait>", "locale=en_US.UTF-8 <wait>", "kbd-chooser/method=us <wait>", "keyboard-configuration/xkb-keymap=us <wait>", "netcfg/get_hostname={{ .Name }} <wait>", "netcfg/get_domain=vagrantup.com <wait>", "fb=false <wait>", "debconf/frontend=noninteractive <wait>", "console-setup/ask_detect=false <wait>", "console-keymaps-at/keymap=us <wait>", "grub-installer/bootdev=/dev/sda <wait>", "<enter><wait>"]
  boot_wait           = "10s"
  cpus                = "${var.cpus}"
  disk_size           = "${var.disk_size}"
  guest_os_type       = "debian8-64"
  headless            = "${var.headless}"
  http_directory      = "${var.http_directory}"
  iso_checksum        = "${var.iso_checksum}"
  iso_url             = "${var.iso_url}"
  memory              = "${var.memory}"
  output_directory    = "${var.build_directory}/packer-${var.template}-vmware"
  shutdown_command    = "echo 'vagrant' | sudo -S /sbin/shutdown -hP now"
  ssh_password        = "vagrant"
  ssh_port            = 22
  ssh_timeout         = "10000s"
  ssh_username        = "vagrant"
  tools_upload_flavor = "linux"
  vm_name             = "${var.template}-${var.build_directory}"
  vmx_data = {
    "cpuid.coresPerSocket"    = "1"
    "ethernet0.pciSlotNumber" = "32"
  }
  vmx_remove_ethernet_interfaces = true
}

build {
  sources = ["source.qemu.autogenerated_1", "source.virtualbox-iso.autogenerated_2", "source.vmware-iso.autogenerated_3"]

  provisioner "shell" {
    environment_vars  = ["HOME_DIR=/home/vagrant", "http_proxy=${var.http_proxy}", "https_proxy=${var.https_proxy}", "no_proxy=${var.no_proxy}"]
    execute_command   = "echo 'vagrant' | {{ .Vars }} sudo -S -E bash -eux '{{ .Path }}'"
    expect_disconnect = "true"
    scripts           = ["prov_packer/full-update.sh", "prov_packer/vagrant.sh", "prov_packer/customization.sh", "prov_packer/docker.sh", "prov_packer/networking.sh", "prov_packer/virtualbox.sh"]
  }

  provisioner "shell" {
    environment_vars  = ["HOME_DIR=/home/vagrant", "http_proxy=${var.http_proxy}", "https_proxy=${var.https_proxy}", "no_proxy=${var.no_proxy}"]
    execute_command   = "echo 'vagrant' | {{ .Vars }} sudo -S -E sh -eux '{{ .Path }}'"
    expect_disconnect = true
    scripts           = ["${var.bento_debian_dir}/scripts/update.sh", "${var.bento_debian_dir}/../_common/motd.sh", "${var.bento_debian_dir}/../_common/sshd.sh", "${var.bento_debian_dir}/scripts/networking.sh", "${var.bento_debian_dir}/scripts/sudoers.sh", "${var.bento_debian_dir}/../_common/vagrant.sh", "${var.bento_debian_dir}/scripts/systemd.sh", "${var.bento_debian_dir}/../_common/virtualbox.sh", "${var.bento_debian_dir}/../ubuntu/scripts/vmware.sh", "${var.bento_debian_dir}/../_common/parallels.sh"]
  }

  provisioner "shell" {
    environment_vars  = ["HOME_DIR=/home/vagrant", "http_proxy=${var.http_proxy}", "https_proxy=${var.https_proxy}", "no_proxy=${var.no_proxy}"]
    execute_command   = "echo 'vagrant' | {{ .Vars }} sudo -S -E sh -eux '{{ .Path }}'"
    expect_disconnect = "true"
    scripts           = ["prov_packer/cleanup.sh", "${var.bento_debian_dir}/../_common/minimize.sh"]
  }

  post-processor "vagrant" {
    keep_input_artifact  = true
    compression_level    = 9
    output               = "${var.build_directory}/${var.box_basename}.{{ .Provider }}.box"
    vagrantfile_template = "${var.vagrantfile}"
  }
  post-processors {
    post-processor "artifice" {
      files = ["${var.build_directory}/${var.box_basename}.{{ .Provider }}.box"]
    }
    post-processor "vagrant-cloud" {
      access_token = "${var.vagrant_cloud_token}"
      box_tag      = "${var.vm_name}"
      version      = "${var.vm_version}"
    }
  }
}
